软件包管理

应用程序：
   
C语言:源代码-->(编译)二进制格式
脚本：解释器（二进制程序）

源代码 --> 编译 --> 链接 --> 运行

   程序:
      库
         静态库
         动态库

.so : Shared Object 共享对象

配置文件


程序的组成部分：
   二进制程序   : /bin /sbin
   库         : /lib
   配置文件    : /etc
   帮助文件    : /usr/share/man

根文件系统:
/bin  
/boot  
/dev  
/etc  
/home  
/lib  
/lib64  
/lost+found  
/media  
/mnt  
/opt  
/proc  
/root  
/sbin  
/selinux  
/srv  
/sys  
/tmp  
/usr  
/var

----------------------------------------------------------------------------------------------------
/bin,/sbin,/lib : 一般来讲，系统启动需要用到的程序都在这些目录里面，所以这些目录不能挂载额外的分区，必须在根文件系统分区上 

----------------------------------------------------------------------------------------------------
/usr/ : 操作系统核心分区，可以单独分区
   bin
   sbin
   lib
----------------------------------------------------------------------------------------------------
/usr/local : 建议单独分区
   bin
   sbin
   lib
   etc
   man
   
   第三方软件安装的目录，并且建议单独分区   
----------------------------------------------------------------------------------------------------
/proc
/sys
   
   这两个目录不能单独分区，而且默认是空的，是给内核用的
----------------------------------------------------------------------------------------------------
/dev : 设备，不能单独分区
   udev:
----------------------------------------------------------------------------------------------------
/root : 不能单独分区

----------------------------------------------------------------------------------------------------
/var : 建议单独分区

----------------------------------------------------------------------------------------------------
/boot : 存放内核，initrd(initramfs)
   
系统启动的过程：
POST--> BIOS(HD)-->(MBR)bootloader(文件系统结构;ext2,ext3,xfs)-->内核
----------------------------------------------------------------------------------------------------



软件包管理器
1、打包成一个文件：二进制程序，库文件、配置文件、帮助文件
2、生成数据库、追踪所安装的每一个文件

软件包管理器的核心功能
1、制作软件包
2、能够实现 安装、卸载、升级、查询、校验、数据库重建、验证数据包等工作

RedHat,SUSE : RPM (RPM is Package Manger)
Debian : dpt

依赖关系:
X-->Y-->Z

前端工具:yum (Yellowdog Update Modifier),  apt-get
后端工具:RPM,                              dpt


rpm命令:
   rpm:
      数据库位置:/var/lib/rpm
   rpmbuild:
   
rpm命名:
包:组成部分
   主包:
      bind-9.7.1-1.el5.i586.rpm
   子包:
      bind-libs-9.7.1-1.el5.i586.rpm
      bind-utils-9.7.1-1.el5.i586.rpm
包名格式:
   name-version-release.arch.rpm
   bind-major.minor.release-release.arch.rpm
   
主版本号:重大改进
次版本号:某个子功能发生重大改变
发行号:修正了部分bug，调整了一点功能

1、安装:
   rpm -i /PATH/TO/PACHAGE_FILE
       -h : 以#号显示进度,每个#号表示2%的进度
       -v : 显示详细的过程
       -vv: 更详细的过程
       --nodeps: 忽略依赖关系，但是安装之后，软件不能运行
       --force : 强行安装，可以实现重装或降级
       --replacepkgs : 重新安装，替换原有安装
       --oldpackage : 降级

   通常我们安装的时候，使用: rpm -ivh /PATH/TO/PACKAGE_FILE
   
2、查询:
   rpm -q PACKAGE_NAME 例如上面的例子: rpm -a bind, 不能将PACKAGE_NAME写成bind-9.7.1-1.el5.i586.rpm这种形式
   rpm -qa : 显示当前系统已经安装的所有包
   rpm -qi PACKAGE_NAME : 查询指定包的说明信息
   rpm -qc PACKAGE_NAME : 查询指定包安装的配置文件
   rpm -qd PACKAGE_NAME : 查询指定包安装的帮助文件
   rpm -qf /path/to/somefile : 查询指定的文件由哪个rpm包安装生成的
   rpm -q --scripts PACKAGE_NAME : 查询指定包中包含的脚本
   
   如果某rpm包尚未安装，我们需查询其说明信息，安装以后会生成的文件
   rpm -qpi /PATH/TO/PACKAGE_FILE (尚未安装) 查询指定包的说明信息
       -qpc: 查询指定包安装的配置文件
       -qpd: 查询指定包安装的帮助文件
       -qpl: 查询安装之后会生成哪些文件

3、升级
   rpm -Uvh /PATH/TO/PACKAGE_FILE : 如果装有老版本的则升级，否则，安装
   rpm -Fvh /PATH/TO/PACKAGE_FILE : 如果装有老版本的则升级，否则，退出
       --oldpackage : 降级
   
4、卸载
   rpm －e PACKAGE_NAME
       --nodeps : 忽略依赖的包

5、校验
   rpm -V PACKAGE_NAME

6、

7、验证来源合法性，及软件包完整性
   加密类型:
      对称:加密解密使用同一个密钥
      公钥:一对儿密钥，公钥。私钥；公钥隐含于私钥中，可以提取出来，并且公开出去
      单向:

    
yum:
   C/S 架构:Client Server
   yum repository
   
yum仓库中的元数据文件
   primary.xml.gz
      包含了:1.所有RPM包的列表
            2.依赖关系
            3.每个RPM安装生成的文件列表
   
   filelists.xml.gz
      包含了:1。当前仓库中所有RPM包的所有文件列表
   
   other.xml.gz
      包含了:1.额外信息,RPM包的修改日志
   
   repomd.xml
      记录了上面的三个文件的时间戳和校验和
      
   comps*-.xml: RPM分组信息
   
如何为yum定义repo文件格式
[Repo_ID]
name=Desciption
baseurl=仓库所在的具体位置
   1.ftp:// ftp地址
   2.http:// web地址
   3.file:/// 本地文件路径
enabled={1|0}
gpgcheck={1|0}
gpgkey=

yum [option] [command] [package ...]

   list : 列表
   clean : 清理缓存
   
repolist:显示repo列表及其简要信息
   all
   enabled : 默认
   disabled : 
   
install : 安装
yum install PACKAGE_NAME

update : 升级
update_to : 升级为指定的版本

remove|erase : 卸载

provides|whatprovides:查看指定的文件或特性是由那个包安装生成的

groupinfo
grouplist
groupinstall
groupremove
groupupdate



/media/cdrom/{Server,VT,Cluster,ClusterStorage}

如何创建yum仓库

createrepo


-------------------------------------------------------------------------
RPM安装:
   二进制格式
   源程序-->编译-->二进制格式
      有些特性是编译选定的，如果编译未选定此特性，将无法使用:
      rpm包的版本会落后于源码包，甚至会落后很多
      

定制安装:手动编译安装
   编译环境，开发环境
      C,C++ :
         gcc : GNU C Compiler 针对于 C
         g++ : 针对于C++
         make : 项目管理工具
            makefile:定义了make (gcc,g++)按照何种次序去编译源程序文件中的源程序
            install : 安装
         
         automake:用于生成makefile.in文件
         autoconf:用于生成configure文件，用于配置我们当前的程序是如何编译的，通过configure脚本文件指定好特性再结合makefile.in文件从而生成makefile文件
                  之后就可以使用make命令结合makefile文件，按照指定的方式对源程序进行编译，编译好二进制文件之后，放到指定的目录就可以安装了  
   开发库，开发工具
   
编译安装的三个步骤：
前提：准备开发环境（编译环境）
安装"Development Tools" 和 "Development Libraries"


1、./configure
      --help : 帮助信息
      --prefix=/path/to/somewhere : 指定软件安装的路径
      --sysconfdir=/PATH/TO/CONFFILE_PATH : 指定配置文件路径
      功能:1.让用户选定编译特性
          2.检查编译环境
2、make
3、make install
      
例如：下面代码演示怎样安装tengine
# tar xf tengine-1.4.2.tar.gz
# cd tengine-1.4.2
# ./configure --prefix=/usr/local/tengine --conf-path=/etc/tengine/tengine.conf
# make
# make install

在安装完成之后，通常需要做的工作:
1.修改PATH环境变量，以能够识别此程序的二进制文件的路径
   （1）编辑/etc/profile文件
    (2) 在/etc/profile.d/目录建立一个一.sh为后缀的文件，在里面定义export PATH=$PATH:/PATH/TO/SOMEWHERE
2.默认情况下，系统搜索库文件的路径/lib,/usr/lib;要增添额外搜寻路径,在/etc/ld.so.conf.d/中创建以.conf为后缀的文件，而后将要增添的路径直接写至此文件中.
  ldconfig : 重新搜寻库文件
      -v : 显示重新搜寻库文件的过程
3.头文件:输出给系统
  默认:/usr/include
  增添头文件的搜索路径，使用链接进行: 例如：将/usr/local/tengine/include下所有文件软链到/usr/include/下
                                     ln -s /usr/local/tengine/include/* /usr/include/ 或 
                                     ln -s /usr/local/tengine/include /usr/include/tengine
4.man文件路径
  默认安装在--prefix指定的目录下的man目录; 系统命令的man文件路径在:/usr/share/man
      man有两种方式寻找man文件:
      1.man -M /PATH/TO/MAN_DIR COMMAND
      2.在/etc/man.config文件中添加一条MANPATH
      

netstat命令:
   -r : 显示路由表
   -n : 以数字的方式显示路由表
   -t : 建立的tcp连接
   -u : 显示udp连接
   -l : 显示监听状态的连接
   -p : 显示监听指定的套接字的进程的进程号
   

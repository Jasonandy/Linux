shell编程：
编译器，解释器

编程语言：机器语言、汇编语言、高级语言

静态语言：编译型语言
   一般：强类型语言
   实现转换成可执行的格式
   C、C++、JAVA、C#
   
动态语言：解释型语言
   一般：弱语言
   边解释边执行
   PHP、SHELL、python、perl

面向过程：shell、c
面向对象：JAVA、python、perl、C++

变量：内存空间 命名

内存：编址的存储单元

进程：

强类型：变量在使用前，必须事先申明，甚至还需要初始化
弱类型：变量用时申明，甚至不区分类型

变量赋值：VAR_NAME=VALUE

bash变量类型：
   环境变量
   本地变量（局部变量）
   位置变量
   特殊变量
   
(一)：本地变量：是某个进程的变量
   VARNAME=VALUE:整个bash进程有效

(二)：局部变量：
   local VARNAME=VALUE

(三)：环境变量：作用域为当前shell进程及其子进程，（注：重新登陆就会启动一个新的shell）
   （1）export VARNAME=VALUE   ,通常也叫“导出一个变量”
   （2）VARNAME=VALUE, 首先定义本地变量
       export VARNAME, 在导出

(四)：位置变量：（通常用在脚本中接收执行脚本时带的参数）
    $1,$2,...
    shift：每次使用剔除对应的参数，相当于参数移位
    $0：命令本身

    例如：./filetest.sh /etc/fstab /etc/inittab
    $1对应于：/etc/fstab
    $2对应于：/etc/inittab 

(五)：特殊变量：
    $?:上一个命令的执行状态返回值
    $#:参数的个数
    $*:参数列表
    $@:参数列表
    
    程序执行可能有两类返回值：
      程序执行结果
      程序状态返回代码：（0-255）
         0：正确执行
         1-255：错误执行，1、2、127 是系统预留的
      
      /dev/null：软件设备，bit bucket,数据黑洞
         有的时候我们执行一条命令，只是想看看执行之后的状态，并不想看到输出结果，这个时候就可以将输出结果重定向到/dev/null里面，就不会显示输出结果了
         例如：判断当前系统student 这个用户存不存在
              # id student &> /dev/null
              # echo $?

变量引用的方法：${VARNAME} 大括号有时可以省略，论具体情况而定 例如：# ANIMAL=pig
                                      # echo "this is a ${ANIMAL}"  如果不想替换变量值则使用单引号
                                      
撤销变量：
unset VARNAME

查看当前shell中的所有变量
set

查看当前shell中的所有环境变量
printenv
env
export

变量命名：
   1、只能包含字母、数字、下划线，并且不能以数字开头，
   2、不应该跟系统中已有的环境变量重名
   3、最好做到见名知其义

脚本在执行时，会启动一个子shell进程：
   命令行中启动的脚本会继承当前shell环境变量
   系统自动执行的脚本（非命令行启动）就需要自我定义需要各环境变量   
   
当我们要对某个变量增加值，可以这样
   假如一开始定义了一个变量：NAME=zhouxingxing
   然后我们需要给NAME这个变量增加一个值age可以这样 : NAME=$NAME:age
   此时，我们再 echo $NAME 返回的值将是：zhouxingxing:age
   
   
脚本：命令的堆砌，按照实际需要，结合命令流程控制机制实现的源程序

shebang:魔数
   #!后面跟解释器的位置 例如：#!/bin/bash

#:在脚本里面#后面都是注释行，不执行

脚本执行有两种方式：
   （1）脚本创建好之后（以.sh结尾），并且在头部申明shebang（#!/bin.bash）然后在里面写好执行的命令，保存之后，修改权限给执行权限，
       可以cd到脚本当前目录执行(如：./myscript.sh)或者将当前目录路径添加到环境变量PATH中，然后直接执行myscript.sh
    (2) 直接作为解释器的参数来执行：例如，bash myscript.sh
   
练习：写一个脚本，完成以下任务
1、添加5个用户，user1,...user5
2、每个用户的密码同用户名，而且要求，添加密码完成之后不限是passwd命令执行的结果信息
3、每个用户添加完成之后，都要显示“xx添加完成”

# useradd user1
# echo "user1" | passwd --stdin user1 &> /dev/null
# echo "create user1 success"

条件判断：
   如果用户不存在;
      添加用户，给密码并且显示添加成功
   否则：
      显示用户已经存在，不添加

bash中如何实现条件判断？
条件测试类型:
   整数测试:
   字符测试:
   文件测试:

条件测试的表达式:
   [ expression ] 命令测试法
   [ [expression] ] 关键字测试法
   test expression
   
整数比较：
   -eq:测试两个整数是否相等：比如 $A -eq $B  相等为真，不等为假
   -ne:测试两个整数是否不相等：比如 $A -ne $B 不等为真，相等为假
   -gt:测试一个数是否大于另一个数：大于为真，否则为假
   -lt:测试一个数是否小于另一个数：小于为真，否则为假
   -ge:测试一个数是否大于或等于另一个数：大于为真，否则为假
   -le:测试一个数是否小于或等于另一个数：小于为真，否则为假
   
例如：
INT1=71
INT2=56
[ INT1 -eq INT2 ]
[[ INT1 -eq INT2 ]]
test INT1 -eq INT2
   
   
命令间的逻辑关系：
   逻辑与：&&
      第一个条件为假时，第二个条件不会执行判断，最终结果已经有
      第一个条件为真时，第二个条件必须执行判断
   逻辑或：||
      第一个条件为真时，第二个条件不会执行判断，最终结果已经有
      第一个条件为假时，第二个条件必须执行判断
   
例如：如果用户user6不存在，就添加user6
! id user6 && useradd user6
id user6 || useradd user6

如果用户存在就显示用户存在，否则就添加用户
id user6 && echo "user6 is exists" || useradd user6

如果用户不存在，就添加，否则显示其已经存在
! id user6 && useradd user6 || echo 'user6 is exists'

如果用户不存在，就添加，并且设置密码，否则就显示已经存在
! id user6 && useradd user6 && echo 'user6' | passwd --stdin user6 || echo "user6 is exists"
或者为了不显示不必要的信息，可以这样写：
! id user6 &> /dev/null && adduser user6 && echo "user6" | passwd --stdin user6 &> /dev/null || echo "user6 is exists"


练习：写一个脚本，完成以下任务
1、使用一个变量，保存一个用户名
2、删除此变量中的用户，且一并删除其家目录
3、显示“用户删除成功类”的信息
# USERNAME=user1
# userdel -r $USERNAME && echo "删除用户成功"


条件判断，控制结构：
(1)单分支if语句
   if 判断条件; then
      statement1
      statement2
      ...
   fi
(2)双分支if语句
   if 判断条件; then
      statement1
      statement2
      ...
   else
      statement3
      statement4
      ...
   fi
   
(3)多分支if语句
   if 判断条件1; then
      statement1
      ...
   elif 判断条件2;then
      statement2
      ...
   elif 判断条件3;then
      statement3
      ...
   ...
   else
      statement4
      ...
   fi

shell脚本中如何进行算数运算：
(1) let 算数表达式
         例如：A=1
              B=2
              let C=$A+$B
              echo $C
(2) $[算数运算表达式]
         例如：C=$[$A+$B]
         
(3) $((算数运算表达式))
         例如：C=$(($A+$B))

(4) expr 算数运算表达式，表达式中各操作数以及运算符之间要有空格，而且要使用命令引用（`）
         例如：C=`expr $A + $B`

注意：如果一个变量加上某个另外的值之后再赋值给这个变量的话，则可以这样写成类似这样： let $SUM+=1
     如果一个变量自增的话可以这样写：$I++
     如果一个变量自减的话可以这样写：$I--
     还有：先加/减 ++$I --$I
     

则总结为：
-=:
+=
/=:
*=:
%=:



exit:退出当前进程
exit # 定义脚本退出码
      如果脚本没有明确定义退出状态码，那么，最后执行的一条命令的退出码即为脚本的退出码


文件测试：
   -e FILE:测试文件是否存在
   -f FILE:测试文件是否为普通文件
   -d FILE:指定路径是否为目录
   -r FILE:测试当前用户对指定文件是都有读取权限
   -w FILE:测试当前用户对指定文件是都有写权限
   -x FILE:测试当前用户对指定文件是都有执行权限

例如：[ -e /etc/inittab ] ：测试 /etc/inittab 文件是否存在
写一个脚本判断文件存不存在，然后输出不同的提示信息
   if [ -e /etc/initab ];then
      echo "this file is exists"
   else
      echo "the file is not exists"
   fi

测试脚本是否有语法错误

(1) bash -n 脚本文件：可以测试后面的脚本文件是否正确

(2) bash -x 脚本文件：单步执行脚本


----------------------------字符串测试--------------------------------

==:测试是否相等，相等为真，不等为假
!=:测试是否不相等，不相等为真，相等为假
>:
<:
-n string:测试字符串是否不空，不空为真，空为假
-z  string:测试指定字符串是否为空，空为真，不空为假

注意：在使用[ $A == $B ]: ==号两边要空格



----------------------------组合测试--------------------------------
-a : 与关系
-o : 或关系
!  : 非关系

例如：
if [ $# -gt 1 -a $# -le 3 ]
if [ $# -gt 1 ] && [ $# -le 3 ]


-----------------------------循环-------------------------------------
for:
while:
until:

for循环结构：
for 变量 in 列表;do
   循环体
done

如何生成列表：
(1) {start..end}：例如：{1..100}
(2) 使用seq,例如：seq 1 2 10 ---------------------> 结束值 （可以省略）
                    |  |--------------> 步进长度 （可以省略）
                    |------> 起始值  (可以省略)                          


declear 申明变量
例如：declear -i SUM=0 申明SUM这个变量保存整型值

练习题：
1、添加10个用户user1和user10，密码同用户名，但要求只有用户不存在的时候才能过添加
2、依次向/etc/passwd中的每个用户问好，并且显示对方的shell,形如：
   Hello,root your shell:/bin/bash
3、统计一下一共有多少个用户
4、写一个脚本，计算100以内所有能被3整除的正整数的和
5、写一个脚本，计算00以内所有奇数的和以及偶数的和
6、写一个脚本，分别显示当前系统上所有默认shell为bash的用户和默认shell为/sbin/nologin的用户，并且统计各类shell下的用户的总数，显示结果形如：
   BASH 3users,they are:
   root redhat gentoo
   
   NOLOGIN 2users,they are:
   apache mysql
   


-------------------case:多分支语句---------------------

case SWITCH in

value1)
   statement
   ...
   ;;
value2)
   statement
   ...
   ;;
*)
   statement
   ...
   ;;
esac

例如:
#!/bin/bash
#
case $1 in
[0-9])
   echo 'A number' ;;
[a-z])
   echo 'small character' ;;
[A-Z])
   echo 'big character' ;;
*)
   echo 'special character' ;;
esac


练习题：
1、写一个脚本，可以接受选项及参数，而后能获取每一个选项，及选项的参数，并能根据选项及参数做出特定的操作，比如：
adminuser.sh --add tom,jerry --del tom,zhouxingxing -v|--verbose -h|--help

2、写一个脚本showlogged.sh，其语法格式为: showlogged.sh -v -c  -h|--help
   其中-h 选项只能单独使用，用于显示帮助信息
   -c选项时，显示当前系统上登录的所有用户数；
   如果同时使用了-v选项，则既显示同时登录的用户数，又显示登录的用户的相关信息
-------------------case:多分支语句---------------------


-------------------while循环--------------------------
while循环: 适用于循环次数未知的场景,要有退出条件
语法:
   while CONDITION;do
      statement
      ...
   done

例如:计算100以内的所有正整数的和
#!/bin/bash
#
declear -i SUM=0
declear -i I=1
while [ $I -le 100 ];do
   let SUM+=$I
   let I++
done

echo $SUM
   
再来一个例子：当用户输入一个字符串的时候把其转换为大写，如果输入的字符串是quit 就退出
#!/bin/bash
#
read -p "please input a string : " A
while [ $A != 'quit' ];do
    echo $A | tr "a-z" "A-Z"
    read -p "please input a string : " A
done

echo "您退出了！"


写一个脚本，循环检测root用户有没有登陆
#!/bin/bash
#
who | grep "root" &> /dev/null
RETVAL=$?

while [ $RETVAL -ne 0 ];do
    echo "`date` root is not log."
    sleep 5
    who | grep "root" &> /dev/null
    RETVAL=$?
done

echo "root has loggin"

-------------------while循环--------------------------



-------------------until循环--------------------------
until循环:执行一系列命令直至条件为 true 时停止。与while刚好相反

until command
do
   Statement(s) to be executed until command is true
done

例如:
#!/bin/bash

a=0

until [ ! $a -lt 10 ]
do
   echo $a
   a=`expr $a + 1`
done

-------------------until循环--------------------------


-------------------函数--------------------------
function:功能
结构化编程，不能独立运行，需要调用时执行，可以被多次调用

定义一个函数:
   function FUNCNAME {
      COMMAND
   }
   
   FUNCNAME() {
      COMMAND
   }

调用函数:
   FUNCNAME
   
自定义执行状态返回值:
   return STATE_NUM(0-255)
   
接受参数的函数:
   调用的时候传参:FUNCNAME ARG1 ARG2 ...
   在函数体内接收参数:$1 对应 ARG1
                  $2 对应 ARG1
                  ...

注意：在调用函数的时候，如果使用反引号`包裹起来，是获取函数体中echo的信息
     直接执行，如果函数中有return，则返回的是状态码

例如:
#!/bin/bash
#
ADDUSER() {
USERNAME=$1
if ! id -u $USERNAME &> /dev/null;then
   useradd $USERNAME
   echo $USERNAME | passwd --stdin $USERNAME &> /dev/null
   return 0
else
   return 1
fi
}

for I in {1..10};do
   ADDUSER user$I
   if [ $? -eq 0 ];then
      echo "add user$I Finished"
   else
      echo "add user$I failure"
   fi
done
-------------------函数--------------------------

------------------------------------------------
一、变量中字符串的长度:${#VAR_NAME}
A = "start"
echo ${#A} :像这样就可以获取字符串的长度

二、变量赋值等:
${parameter:-word}: 如果parameter为空，或者未定义，则变量展开为"word"，否则展开为parameter值
${parameter:+word}: 如果parameter为空，或者未定义，不做任何操作，否则展开为word值
${parameter:=word}: 如果parameter为空，或者未定义，则变量展开为"word"，并将展开后的值赋值给parameter
${parameter:=offset}:
${parameter:=offset:length}: 取子串，从offset处的后一个字符开始，取length的长度

三、引用其他文件
source /PATH/TO/FILE
或者
. /PATH/TO/FILE

四、局部变量：在函数中使用变量的时候，如果改变量只是在函数内里面使用需要申明local,如果不申明，外部存在同名的变量，将会影响到外部变量
local VAR_NAME

五、命令mktemp：创建临时文件或者目录
例如:mktemp /tmp/file.XXX ，就会自动生成不会重名的文件
    mktemp -d /tmp/dir.XXX 价格-d 选项是创建目录

六、信号
kill -SIGNAL PID
   1:HUP
   2:INT
   9:KILL
   15:TERM
   
脚本中，能够实现信号捕捉，但是9信号和15信号不能捕捉

trap命令:可以实现信号捕捉
   用法:trap 'COMMAND' 信号列表
   例如:
   #!/bin/bash
   #
   trap 'echo "you go"' INT
   while :;do
      date
      sleep
   done











